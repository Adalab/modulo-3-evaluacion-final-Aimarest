{"ast":null,"code":"var _jsxFileName = \"/home/adalaber/Adalab/modulo-3/Evaluacion final-Modulo-3-React/modulo-3-evaluacion-final-Aimarest/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport \"../styles/App.scss\";\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport getApiMovies from \"../services/MoviesApi\";\nimport objectToExport from \"../services/LocalStorage\";\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport MovieSceneList from \"./MovieSceneList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [movieScenes, setMovieScenes] = useState(objectToExport.get(\"movies\", []));\n  const [filterYear, setFilterYear] = useState(\"\");\n  const [filterName, setFilterName] = useState(\"\");\n  useEffect(() => {\n    // Usamos un useEffect para ejecutar el fetch() una sóla vez al cargar la página.\n    if (movieScenes.length === 0) {\n      getApiMovies().then(data => {\n        //Guardo en el ls lo que me ha devuelto el fetch\n        objectToExport.set(\"movies\", data); //Modifico la variable de estado del array de películas.\n\n        setMovieScenes(data);\n      });\n    }\n  }, []); //Función que agrupa los años de las películas en una constante.\n\n  const getYears = () => {\n    const yearMovies = movieScenes.map(movie => movie.year); // Función que filtra para que ningún año se repita:\n\n    const uniqueYear = yearMovies.filter((movie, i) => {\n      return yearMovies.indexOf(movie) === i;\n    });\n    return uniqueYear;\n  }; //Filtro por año:\n\n\n  const filterByYear = value => {\n    setFilterYear(value);\n  }; //Fitro por nombre:\n\n\n  const filterByName = value => {\n    setFilterName(value);\n  };\n\n  const movieFilters = movieScenes.filter(movie => {\n    return filterYear === \"\" ? true : movie.year === parseInt(filterYear);\n  }).filter(movie => {\n    if (filterName.length === 0) {\n      return true;\n    } else {\n      if (movie.name.toLowerCase().includes(filterName.toLowerCase())) {\n        return true;\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Filters, {\n                filterName: filterName,\n                years: getYears(),\n                filterByYear: filterByYear,\n                filterByName: filterByName,\n                setFilterName: setFilterName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MovieSceneList, {\n                movies: movieFilters\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"oVCaJLXgYL1oIW+S8T+wM2V7G9g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adalaber/Adalab/modulo-3/Evaluacion final-Modulo-3-React/modulo-3-evaluacion-final-Aimarest/src/components/App.js"],"names":["useState","useEffect","Routes","Route","getApiMovies","objectToExport","Header","Filters","MovieSceneList","App","movieScenes","setMovieScenes","get","filterYear","setFilterYear","filterName","setFilterName","length","then","data","set","getYears","yearMovies","map","movie","year","uniqueYear","filter","i","indexOf","filterByYear","value","filterByName","movieFilters","parseInt","name","toLowerCase","includes"],"mappings":"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","sourcesContent":["import \"../styles/App.scss\";\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport getApiMovies from \"../services/MoviesApi\";\nimport objectToExport from \"../services/LocalStorage\";\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport MovieSceneList from \"./MovieSceneList\";\n\nfunction App() {\n  const [movieScenes, setMovieScenes] = useState(\n    objectToExport.get(\"movies\", [])\n  );\n  const [filterYear, setFilterYear] = useState(\"\");\n  const [filterName, setFilterName] = useState(\"\");\n  useEffect(() => {\n    // Usamos un useEffect para ejecutar el fetch() una sóla vez al cargar la página.\n    if (movieScenes.length === 0) {\n      getApiMovies().then((data) => {\n        //Guardo en el ls lo que me ha devuelto el fetch\n        objectToExport.set(\"movies\", data);\n        //Modifico la variable de estado del array de películas.\n        setMovieScenes(data);\n      });\n    }\n  }, []);\n\n  //Función que agrupa los años de las películas en una constante.\n  const getYears = () => {\n    const yearMovies = movieScenes.map((movie) => movie.year);\n    // Función que filtra para que ningún año se repita:\n\n    const uniqueYear = yearMovies.filter((movie, i) => {\n      return yearMovies.indexOf(movie) === i;\n    });\n    return uniqueYear;\n  };\n\n  //Filtro por año:\n\n  const filterByYear = (value) => {\n    setFilterYear(value);\n  };\n  //Fitro por nombre:\n  const filterByName = (value) => {\n    setFilterName(value);\n  };\n\n  const movieFilters = movieScenes\n    .filter((movie) => {\n      return filterYear === \"\" ? true : movie.year === parseInt(filterYear);\n    })\n    .filter((movie) => {\n      if (filterName.length === 0) {\n        return true;\n      } else {\n        if (movie.name.toLowerCase().includes(filterName.toLowerCase())) {\n          return true;\n        }\n      }\n    });\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n        <section>\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <>\n                  <Filters\n                    filterName={filterName}\n                    years={getYears()}\n                    filterByYear={filterByYear}\n                    filterByName={filterByName}\n                    setFilterName={setFilterName}\n                  />\n                  <MovieSceneList movies={movieFilters} />\n                </>\n              }\n            />\n          </Routes>\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
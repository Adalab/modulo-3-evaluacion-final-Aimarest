{"ast":null,"code":"var _jsxFileName = \"/home/adalaber/Adalab/modulo-3/Evaluacion final-Modulo-3-React/modulo-3-evaluacion-final-Aimarest/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport \"../styles/App.scss\";\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport getApiMovies from \"../services/MoviesApi\";\nimport objectToExport from \"../services/LocalStorage\";\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport MovieSceneList from \"./MovieSceneList\";\nimport MovieSceneDetail from \"./MovieSceneDetail\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //Buscar en localStorage el valor del input del filtro.\n  const inputText = objectToExport.get(\"inputText\", \"\");\n  const [movieScenes, setMovieScenes] = useState(objectToExport.get(\"movies\", []));\n  const [filterYear, setFilterYear] = useState(yearSearch);\n  const [filterName, setFilterName] = useState(inputText);\n  useEffect(() => {\n    // Usamos un useEffect para ejecutar el fetch() una sóla vez al cargar la página.\n    if (movieScenes.length === 0) {\n      getApiMovies().then(data => {\n        data = data.map((scene, index) => ({ ...scene,\n          id: index\n        })); //Guardo en el ls lo que me ha devuelto el fetch\n\n        objectToExport.set(\"movies\", data); //Modifico la variable de estado del array de películas.\n\n        setMovieScenes(data);\n      });\n    }\n\n    return () => {\n      objectToExport.set(\"movies\", []);\n    };\n  }, []); //Función que agrupa los años de las películas en una constante.\n\n  const getYears = () => {\n    const yearMovies = movieScenes.map(movie => movie.year); // Función que ordena los años de menor a mayor y filtra para que ningún año se repita :\n\n    const uniqueYear = yearMovies.sort((a, b) => a - b).filter((movie, i) => {\n      return yearMovies.indexOf(movie) === i;\n    });\n    return uniqueYear;\n  }; //Filtro por año:\n\n\n  const filterByYear = value => {\n    setFilterYear(value);\n    objectToExport.set(\"yearSearch\", value);\n  }; //Fitro por nombre:\n\n\n  const filterByName = value => {\n    setFilterName(value);\n    objectToExport.set(\"inputText\", value);\n  }; //Ordenar las películas por orden alfabético y filtrado:\n\n\n  const movieFilters = movieScenes.sort((a, b) => a.name > b.name ? 1 : a.name < b.name ? -1 : 0).filter(movie => {\n    return filterYear === \"\" ? true : movie.year === parseInt(filterYear);\n  }).filter(movie => {\n    if (filterName.length === 0) {\n      return true;\n    } else {\n      if (movie.name.toLowerCase().includes(filterName.toLowerCase())) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Filters, {\n                filterName: filterName,\n                years: getYears(),\n                filterYear: filterYear,\n                filterByYear: filterByYear,\n                setFilterYear: setFilterYear,\n                filterByName: filterByName,\n                setFilterName: setFilterName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: [\"Total scenes: \", movieFilters.length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MovieSceneList, {\n                movies: movieFilters\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/movie/:movieIndex\",\n            element: /*#__PURE__*/_jsxDEV(MovieSceneDetail, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"w6tX2hFdV25101wnUfqjaLhz6+Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adalaber/Adalab/modulo-3/Evaluacion final-Modulo-3-React/modulo-3-evaluacion-final-Aimarest/src/components/App.js"],"names":["useState","useEffect","Routes","Route","getApiMovies","objectToExport","Header","Filters","MovieSceneList","MovieSceneDetail","App","inputText","get","movieScenes","setMovieScenes","filterYear","setFilterYear","yearSearch","filterName","setFilterName","length","then","data","map","scene","index","id","set","getYears","yearMovies","movie","year","uniqueYear","sort","a","b","filter","i","indexOf","filterByYear","value","filterByName","movieFilters","name","parseInt","toLowerCase","includes"],"mappings":"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","sourcesContent":["import \"../styles/App.scss\";\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport getApiMovies from \"../services/MoviesApi\";\nimport objectToExport from \"../services/LocalStorage\";\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport MovieSceneList from \"./MovieSceneList\";\nimport MovieSceneDetail from \"./MovieSceneDetail\";\n\nfunction App() {\n  //Buscar en localStorage el valor del input del filtro.\n  const inputText = objectToExport.get(\"inputText\", \"\");\n  const [movieScenes, setMovieScenes] = useState(\n    objectToExport.get(\"movies\", [])\n  );\n  const [filterYear, setFilterYear] = useState(yearSearch);\n  const [filterName, setFilterName] = useState(inputText);\n  useEffect(() => {\n    // Usamos un useEffect para ejecutar el fetch() una sóla vez al cargar la página.\n    if (movieScenes.length === 0) {\n      getApiMovies().then((data) => {\n        data = data.map((scene, index) => ({\n          ...scene,\n          id: index,\n        }));\n        //Guardo en el ls lo que me ha devuelto el fetch\n        objectToExport.set(\"movies\", data);\n        //Modifico la variable de estado del array de películas.\n        setMovieScenes(data);\n      });\n    }\n    return () => {\n      objectToExport.set(\"movies\", []);\n    };\n  }, []);\n\n  //Función que agrupa los años de las películas en una constante.\n  const getYears = () => {\n    const yearMovies = movieScenes.map((movie) => movie.year);\n\n    // Función que ordena los años de menor a mayor y filtra para que ningún año se repita :\n\n    const uniqueYear = yearMovies\n      .sort((a, b) => a - b)\n      .filter((movie, i) => {\n        return yearMovies.indexOf(movie) === i;\n      });\n\n    return uniqueYear;\n  };\n\n  //Filtro por año:\n\n  const filterByYear = (value) => {\n    setFilterYear(value);\n    objectToExport.set(\"yearSearch\", value);\n  };\n\n  //Fitro por nombre:\n  const filterByName = (value) => {\n    setFilterName(value);\n    objectToExport.set(\"inputText\", value);\n  };\n  //Ordenar las películas por orden alfabético y filtrado:\n\n  const movieFilters = movieScenes\n    .sort((a, b) => (a.name > b.name ? 1 : a.name < b.name ? -1 : 0))\n    .filter((movie) => {\n      return filterYear === \"\" ? true : movie.year === parseInt(filterYear);\n    })\n    .filter((movie) => {\n      if (filterName.length === 0) {\n        return true;\n      } else {\n        if (movie.name.toLowerCase().includes(filterName.toLowerCase())) {\n          return true;\n        }\n      }\n      return false;\n    });\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n        <section>\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <>\n                  <Filters\n                    filterName={filterName}\n                    years={getYears()}\n                    filterYear={filterYear}\n                    filterByYear={filterByYear}\n                    setFilterYear={setFilterYear}\n                    filterByName={filterByName}\n                    setFilterName={setFilterName}\n                  />\n                  <h1>Total scenes: {movieFilters.length}</h1>\n                  <MovieSceneList movies={movieFilters} />\n                </>\n              }\n            />\n            <Route path=\"/movie/:movieIndex\" element={<MovieSceneDetail />} />\n          </Routes>\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
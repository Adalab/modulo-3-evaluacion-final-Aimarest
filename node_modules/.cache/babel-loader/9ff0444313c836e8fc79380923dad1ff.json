{"ast":null,"code":"var _jsxFileName = \"/home/adalaber/Adalab/modulo-3/Evaluacion final-Modulo-3-React/modulo-3-evaluacion-final-Aimarest/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport \"../styles/App.scss\";\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport getApiMovies from \"../services/MoviesApi\";\nimport objectToExport from \"../services/LocalStorage\";\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport MovieSceneList from \"./MovieSceneList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst [filterYear, setFilterYear] = useState(\"\");\nconst [filterName, setFilterName] = useState(\"\");\n\nfunction App() {\n  _s();\n\n  const [movieScenes, setMovieScenes] = useState(objectToExport.get(\"movies\", []));\n  useEffect(() => {\n    if (movieScenes.length === 0) {\n      getApiMovies().then(data => {\n        //Guardo en el ls lo que me ha devuelto el fetch\n        objectToExport.set(\"movies\", data); //Modifico la variable de estado del array de películas.\n\n        setMovieScenes(data);\n      });\n    }\n  }, []); //Función que agrupa los años de las películas en una constante.\n\n  const getYears = () => {\n    const yearMovies = movieScenes.map(movie => movie.year); // Función que filtra para que ningún año se repita:\n\n    const uniqueYear = yearMovies.filter((movie, i) => {\n      return yearMovies.indexOf(movie) === i;\n    });\n    return uniqueYear;\n  }; //Filtro por año:\n\n\n  const filterByYear = value => {\n    setFilterYear(value);\n  };\n\n  const movieFilters = movieScenes.filter(movie => {\n    return filterYear === \"\" ? true : movie.year === filterYeaar;\n  }).filter(movie => {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Filters, {\n                years: getYears(),\n                filterByYear: filterByYear\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MovieSceneList, {\n                movies: movieFilters\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"nfL2nx72XcFG5d6Ol0WcSTXdvy8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adalaber/Adalab/modulo-3/Evaluacion final-Modulo-3-React/modulo-3-evaluacion-final-Aimarest/src/components/App.js"],"names":["useState","useEffect","Routes","Route","getApiMovies","objectToExport","Header","Filters","MovieSceneList","filterYear","setFilterYear","filterName","setFilterName","App","movieScenes","setMovieScenes","get","length","then","data","set","getYears","yearMovies","map","movie","year","uniqueYear","filter","i","indexOf","filterByYear","value","movieFilters","filterYeaar"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,MAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;;AACA,SAASa,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAC5CK,cAAc,CAACW,GAAf,CAAmB,QAAnB,EAA6B,EAA7B,CAD4C,CAA9C;AAGAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,WAAW,CAACG,MAAZ,KAAuB,CAA3B,EAA8B;AAC5Bb,MAAAA,YAAY,GAAGc,IAAf,CAAqBC,IAAD,IAAU;AAC5B;AACAd,QAAAA,cAAc,CAACe,GAAf,CAAmB,QAAnB,EAA6BD,IAA7B,EAF4B,CAG5B;;AACAJ,QAAAA,cAAc,CAACI,IAAD,CAAd;AACD,OALD;AAMD;AACF,GATQ,EASN,EATM,CAAT,CAJa,CAeb;;AACA,QAAME,QAAQ,GAAG,MAAM;AACrB,UAAMC,UAAU,GAAGR,WAAW,CAACS,GAAZ,CAAiBC,KAAD,IAAWA,KAAK,CAACC,IAAjC,CAAnB,CADqB,CAErB;;AAEA,UAAMC,UAAU,GAAGJ,UAAU,CAACK,MAAX,CAAkB,CAACH,KAAD,EAAQI,CAAR,KAAc;AACjD,aAAON,UAAU,CAACO,OAAX,CAAmBL,KAAnB,MAA8BI,CAArC;AACD,KAFkB,CAAnB;AAGA,WAAOF,UAAP;AACD,GARD,CAhBa,CA0Bb;;;AAEA,QAAMI,YAAY,GAAIC,KAAD,IAAW;AAC9BrB,IAAAA,aAAa,CAACqB,KAAD,CAAb;AACD,GAFD;;AAGA,QAAMC,YAAY,GAAGlB,WAAW,CAC7Ba,MADkB,CACVH,KAAD,IAAW;AACjB,WAAOf,UAAU,KAAK,EAAf,GAAoB,IAApB,GAA2Be,KAAK,CAACC,IAAN,KAAeQ,WAAjD;AACD,GAHkB,EAIlBN,MAJkB,CAIVH,KAAD,IAAW,CAAE,CAJF,CAArB;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAA,+BACE,QAAC,MAAD;AAAA,iCACE,QAAC,KAAD;AACE,YAAA,IAAI,EAAC,GADP;AAEE,YAAA,OAAO,eACL;AAAA,sCACE,QAAC,OAAD;AAAS,gBAAA,KAAK,EAAEH,QAAQ,EAAxB;AAA4B,gBAAA,YAAY,EAAES;AAA1C;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,cAAD;AAAgB,gBAAA,MAAM,EAAEE;AAAxB;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GAxDQnB,G;;KAAAA,G;AA0DT,eAAeA,GAAf","sourcesContent":["import \"../styles/App.scss\";\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport getApiMovies from \"../services/MoviesApi\";\nimport objectToExport from \"../services/LocalStorage\";\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport MovieSceneList from \"./MovieSceneList\";\nconst [filterYear, setFilterYear] = useState(\"\");\nconst [filterName, setFilterName] = useState(\"\");\nfunction App() {\n  const [movieScenes, setMovieScenes] = useState(\n    objectToExport.get(\"movies\", [])\n  );\n  useEffect(() => {\n    if (movieScenes.length === 0) {\n      getApiMovies().then((data) => {\n        //Guardo en el ls lo que me ha devuelto el fetch\n        objectToExport.set(\"movies\", data);\n        //Modifico la variable de estado del array de películas.\n        setMovieScenes(data);\n      });\n    }\n  }, []);\n\n  //Función que agrupa los años de las películas en una constante.\n  const getYears = () => {\n    const yearMovies = movieScenes.map((movie) => movie.year);\n    // Función que filtra para que ningún año se repita:\n\n    const uniqueYear = yearMovies.filter((movie, i) => {\n      return yearMovies.indexOf(movie) === i;\n    });\n    return uniqueYear;\n  };\n\n  //Filtro por año:\n\n  const filterByYear = (value) => {\n    setFilterYear(value);\n  };\n  const movieFilters = movieScenes\n    .filter((movie) => {\n      return filterYear === \"\" ? true : movie.year === filterYeaar;\n    })\n    .filter((movie) => {});\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n        <section>\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <>\n                  <Filters years={getYears()} filterByYear={filterByYear} />\n                  <MovieSceneList movies={movieFilters} />\n                </>\n              }\n            />\n          </Routes>\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
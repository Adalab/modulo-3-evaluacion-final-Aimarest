{"ast":null,"code":"var _jsxFileName = \"/home/adalaber/Adalab/modulo-3/Evaluacion final-Modulo-3-React/modulo-3-evaluacion-final-Aimarest/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport \"../styles/App.scss\";\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { matchPath, useLocation } from \"react-router\";\nimport getApiMovies from \"../services/MoviesApi\";\nimport objectToExport from \"../services/LocalStorage\";\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport MovieSceneList from \"./MovieSceneList\";\nimport MovieSceneDetail from \"./MovieSceneDetail\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //Buscar en localStorage el valor del input del filtro.\n  const inputText = objectToExport.get(\"inputText\", \"\");\n  const [movieScenes, setMovieScenes] = useState(objectToExport.get(\"movies\", []));\n  const [filterYear, setFilterYear] = useState(\"\");\n  const [filterName, setFilterName] = useState(inputText);\n  useEffect(() => {\n    // Usamos un useEffect para ejecutar el fetch() una sóla vez al cargar la página.\n    if (movieScenes.length === 0) {\n      getApiMovies().then(data => {\n        data = data.map((scene, index) => ({ ...scene,\n          id: index\n        })); //Guardo en el ls lo que me ha devuelto el fetch\n\n        objectToExport.set(\"movies\", data); //Modifico la variable de estado del array de películas.\n\n        setMovieScenes(data);\n      });\n    }\n\n    return () => {\n      objectToExport.set(\"movies\", []);\n    };\n  }, []); //Función que agrupa los años de las películas en una constante.\n\n  const getYears = () => {\n    const yearMovies = movieScenes.map(movie => movie.year); // Función que filtra para que ningún año se repita:\n\n    const uniqueYear = yearMovies.filter((movie, i) => {\n      return yearMovies.indexOf(movie) === i;\n    });\n    return uniqueYear;\n  };\n\n  const orderedYears = uniqueYear.sort((a, b) => a - b);\n  console.log(orderedYears); //Filtro por año:\n\n  const filterByYear = value => {\n    setFilterYear(value);\n  }; //Fitro por nombre:\n\n\n  const filterByName = value => {\n    setFilterName(value);\n    objectToExport.set(\"inputText\", value);\n  };\n\n  const movieFilters = movieScenes.filter(movie => {\n    return filterYear === \"\" ? true : movie.year === parseInt(filterYear);\n  }).filter(movie => {\n    if (filterName.length === 0) {\n      return true;\n    } else {\n      if (movie.name.toLowerCase().includes(filterName.toLowerCase())) {\n        return true;\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Filters, {\n                filterName: filterName,\n                years: getYears(),\n                filterByYear: filterByYear,\n                filterByName: filterByName,\n                setFilterName: setFilterName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: [\"total: \", movieFilters.length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(MovieSceneList, {\n                movies: movieFilters\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/movie/:movieIndex\",\n            element: /*#__PURE__*/_jsxDEV(MovieSceneDetail\n            /*movie={movieFound} */\n            , {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 24\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XAqhwmlzf8snnl2ZbR3uKVYwvcE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/adalaber/Adalab/modulo-3/Evaluacion final-Modulo-3-React/modulo-3-evaluacion-final-Aimarest/src/components/App.js"],"names":["useState","useEffect","Routes","Route","matchPath","useLocation","getApiMovies","objectToExport","Header","Filters","MovieSceneList","MovieSceneDetail","App","inputText","get","movieScenes","setMovieScenes","filterYear","setFilterYear","filterName","setFilterName","length","then","data","map","scene","index","id","set","getYears","yearMovies","movie","year","uniqueYear","filter","i","indexOf","orderedYears","sort","a","b","console","log","filterByYear","value","filterByName","movieFilters","parseInt","name","toLowerCase","includes"],"mappings":"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","sourcesContent":["import \"../styles/App.scss\";\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { matchPath, useLocation } from \"react-router\";\nimport getApiMovies from \"../services/MoviesApi\";\nimport objectToExport from \"../services/LocalStorage\";\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport MovieSceneList from \"./MovieSceneList\";\nimport MovieSceneDetail from \"./MovieSceneDetail\";\n\nfunction App() {\n  //Buscar en localStorage el valor del input del filtro.\n  const inputText = objectToExport.get(\"inputText\", \"\");\n  const [movieScenes, setMovieScenes] = useState(\n    objectToExport.get(\"movies\", [])\n  );\n  const [filterYear, setFilterYear] = useState(\"\");\n  const [filterName, setFilterName] = useState(inputText);\n  useEffect(() => {\n    // Usamos un useEffect para ejecutar el fetch() una sóla vez al cargar la página.\n    if (movieScenes.length === 0) {\n      getApiMovies().then((data) => {\n        data = data.map((scene, index) => ({\n          ...scene,\n          id: index,\n        }));\n        //Guardo en el ls lo que me ha devuelto el fetch\n        objectToExport.set(\"movies\", data);\n        //Modifico la variable de estado del array de películas.\n        setMovieScenes(data);\n      });\n    }\n    return () => {\n      objectToExport.set(\"movies\", []);\n    };\n  }, []);\n\n  //Función que agrupa los años de las películas en una constante.\n  const getYears = () => {\n    const yearMovies = movieScenes.map((movie) => movie.year);\n    // Función que filtra para que ningún año se repita:\n\n    const uniqueYear = yearMovies.filter((movie, i) => {\n      return yearMovies.indexOf(movie) === i;\n    });\n    return uniqueYear;\n  };\n  const orderedYears = uniqueYear.sort((a, b) => a - b);\n  console.log(orderedYears);\n  //Filtro por año:\n\n  const filterByYear = (value) => {\n    setFilterYear(value);\n  };\n  //Fitro por nombre:\n  const filterByName = (value) => {\n    setFilterName(value);\n    objectToExport.set(\"inputText\", value);\n  };\n\n  const movieFilters = movieScenes\n    .filter((movie) => {\n      return filterYear === \"\" ? true : movie.year === parseInt(filterYear);\n    })\n    .filter((movie) => {\n      if (filterName.length === 0) {\n        return true;\n      } else {\n        if (movie.name.toLowerCase().includes(filterName.toLowerCase())) {\n          return true;\n        }\n      }\n    });\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n        <section>\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <>\n                  <Filters\n                    filterName={filterName}\n                    years={getYears()}\n                    filterByYear={filterByYear}\n                    filterByName={filterByName}\n                    setFilterName={setFilterName}\n                  />\n                  <h1>total: {movieFilters.length}</h1>\n                  <MovieSceneList movies={movieFilters} />\n                </>\n              }\n            />\n            <Route\n              path=\"/movie/:movieIndex\"\n              element={<MovieSceneDetail /*movie={movieFound} */ />}\n            />\n          </Routes>\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}